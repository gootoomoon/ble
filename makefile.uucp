# Makefile for building uucp

# Compiler specifications
CC 	     := gcc
CC_DEBUG     := -g
CC_FLAGS     := -c -pedantic -Wall -std=c99
DEPEND_FLAGS := -MM -MT

# Compiler definitions
DEFINES :=

# Archiver specifications
AR 	 := ar
AR_FLAGS := -rcs

# Linker specifications
LD 	 := gcc
LD_DEBUG := -g
LD_FLAGS := -pedantic -Wall -std=c99

# Cleaner specifications
RM 	 := rm
RM_FLAGS := -Rf

# Build directories
BUILD_DIR  := build
OBJ_DIR    := $(BUILD_DIR)/obj
DEPEND_DIR := $(BUILD_DIR)/depend

# If no target defined build 'debug'
ifeq ($(MAKECMDGOALS),)
        MAKECMDGOALS := debug
endif

# Add 'debug' specfic defines/flags
ifeq ($(MAKECMDGOALS),debug)
        CC_FLAGS += $(CC_DEBUG)
        LD_FLAGS += $(LD_DEBUG)
        DEFINES += -DDEBUG
endif

# Input files
SOURCE_FILES := main.c				\
		device.c			\
		ui.c                            \
		util.c
OBJ_FILES    := $(patsubst %.c,$(OBJ_DIR)/%.o, $(SOURCE_FILES))
DEPEND_FILES := $(patsubst %.c,$(DEPEND_DIR)/%.d, $(SOURCE_FILES))

# System packages
SYSTEM_PACKAGES := gthread-2.0 gtk+-2.0

# System header files
SYSTEM_INCLUDE_DIRS :=

# System libraries
SYSTEM_LIBS := `pkg-config --libs $(SYSTEM_PACKAGES)`

# Local packages
LOCAL_PACKAGES := ui fs linux

# Local header files
LOCAL_INCLUDE_DIRS := $(foreach i, $(LOCAL_PACKAGES), -I $(i))

# Local libraries
LOCAL_LIBS := $(join $(LOCAL_PACKAGES), $(patsubst %, /$(BUILD_DIR)/lib%.a, $(LOCAL_PACKAGES)))

# All header files
ALL_INCLUDE_DIRS := $(SYSTEM_INCLUDE_DIRS) $(LOCAL_INCLUDE_DIRS)

# All libraries
ALL_LIBS := $(LOCAL_LIBS) $(SYSTEM_LIBS)

# Target files
TARGET_FILE := uucp
TARGET_LIB  := $(patsubst %, $(BUILD_DIR)/lib%.a, $(TARGET_FILE))
TARGET_GOAL := $(BUILD_DIR)/$(TARGET_FILE)

# Top level target
debug release : $(TARGET_GOAL)
	echo "\nBuilding $(TARGET_FILE)\n"

$(TARGET_GOAL) : $(LOCAL_LIBS) $(OBJ_FILES)
	$(CC) $(LD_FLAGS) $(DEFINES) $(OBJ_FILES) $(LOCAL_LIBS) $(SYSTEM_LIBS) -o $@

%.a : .FORCE
	echo
	echo "---> $(patsubst %/build/, %, $(dir $@))"
	make --no-print-directory -C $(patsubst %/build/, %, $(dir $@)) $(MAKECMDGOALS)
	echo
	echo "<--- $(patsubst %/build/, %, $(dir $@))"
	echo

# Implicit rule for object files
$(OBJ_DIR)/%.o : %.c
	echo "\nCompiling $<"
	$(CC) $(CC_FLAGS) $(DEFINES) $(ALL_INCLUDE_DIRS) $< -o $@

# Implicit rule for dependency files
$(DEPEND_DIR)/%.d : %.c
	$(CC) $(DEPEND_FLAGS) $(patsubst %.c,$(OBJ_DIR)/%.o, $(notdir $<)) \
	$(DEFINES) $(LOCAL_INCLUDE_DIRS) $< > $@
	$(CC) $(DEPEND_FLAGS) $(patsubst %.c,$(DEPEND_DIR)/%.d, $(notdir $<)) \
	$(DEFINES) $(LOCAL_INCLUDE_DIRS) $< >> $@

ifneq ($(MAKECMDGOALS),clean)
        $(shell mkdir -p $(BUILD_DIR))
        $(shell mkdir -p $(OBJ_DIR))
        $(shell mkdir -p $(DEPEND_DIR))
        -include $(DEPEND_FILES)
endif

clean :
	-$(foreach package, $(LOCAL_PACKAGES),			\
	     echo;						\
	     echo "---> $(package)";				\
	     make --no-print-directory -C $(package) clean;	\
	     echo;						\
	     echo "<--- $(package)";				\
	     echo;)
	echo "\nCleaning $(TARGET_FILE)\n"
	-$(RM) $(RM_FLAGS) $(BUILD_DIR)

.PHONY : clean

.SILENT :

.FORCE :
